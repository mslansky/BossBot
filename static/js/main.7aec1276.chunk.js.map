{"version":3,"sources":["chatbot.js","App.js","reportWebVitals.js","index.js"],"names":["convoStages","HintBotPrompts","BossBotPrompts","currentStage","prompt","response","indexOf","App","state","show","messages","botWaiting","convoInputValue","showModal","e","setState","closeModal","BossBot","HintBot","botMessage","push","user","message","this","console","log","messageObject","val","Media","className","Navbar","bg","variant","sticky","Brand","href","Nav","Link","Button","onClick","Modal","onHide","Header","Title","Body","Footer","map","InputGroup","Prepend","Text","FormControl","as","aria-label","value","onChange","evt","updateConvoInputValue","target","addMessage","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7aec1276.chunk.js","sourcesContent":["\nconst convoStages = [\"Start\", \"WhatPrompted\", \"Performance\", \"OtherTopics\", \"Salary\", \"Finish\"]\n\nconst HintBotPrompts = {\n  \"Start\": `Hi I'm HintBot, your assistant for today's practice. To start, you'll need to ask your 'manager' to talk \n  about compensation. This is often the hardest part of the conversation so remember to be direct! It's normal and reasonable to ask for a raise.`,\n  \"WhatPrompted\": `*Hintbot Here!* This is a good chance to provide context to the conversation. There are many opportunities to talk \n  about your salary. Maybe you've had new responsibilities at work, completed an impactful project, been putting in \n  extra hours or just been in your role for quite some time. If your company has a specifc time when raises occur, \n  it's important to know it and talk early!`,\n  \"Performance\": `*Hintbot Here!* When talking about your performance it's important to create a clear narrative. Discuss how you've\n  added value and gone above your role's requirements. Metrics can also help when appropriate. The more info you \n  provide the easier it is for your manager to advocate on your behalf. Consider creating some documentation in prep.\n  Also consider discussing how you plan to continue your success and what your future goals are.`,\n  \"OtherTopics\": `*Hintbot Here!* Other topics you may want to consider discussing is if any new responsibilities will be required. Take this time to ask your boss about expectations or certain changes. Some companies may require management duties at certain pay grades.`,\n  \"Salary\": `*Hintbot Here!* Getting down to 'brass tax' can be scary but don't undersell yourself and be specific! Do your research \n  and understand what your local market rate is. Ask for a very specific number.`,\n  \"Finish\": \"Great Job! Please check out our other resources or practice again!\"\n};\n\nconst BossBotPrompts = {\n  \"Start\": null,\n  \"WhatPrompted\": \"BossBot: What prompted you to bring this up?\",\n  \"Performance\": \"BossBot: Okay, Let's talk about your performance in detail.\",\n  \"OtherTopics\": \"BossBot: You're making a compelling case. Is there anything else you'd like to discuss?\",\n  \"Salary\": \"BossBot: Those are some great questions. I'll have to get back to you on those.\",\n  \"Finish\": \"BossBot: Okay, thanks for being specific. That makes my job easier. You've given me the right info to take the next steps, I will let you know what I decide.\",\n};\n\nlet currentStage = \"Start\"\n\nconst prompt = () => {\n  const response = {\n    \"HintBot\": HintBotPrompts[currentStage],\n    \"BossBot\": BossBotPrompts[currentStage]\n  }\n  currentStage = convoStages[convoStages.indexOf(currentStage) + 1];\n  return response;\n}\n\nexport default prompt;","import React from 'react';\nimport './App.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport prompt from './chatbot.js';\nimport Media from 'react-bootstrap/Media';\n\nexport default class App extends React.Component{\n  state = {\n    show: false,\n    messages: [],\n    botWaiting: false,\n    convoInputValue: \"\"\n  };\n\n  componentDidMount(){\n    const {BossBot, HintBot} = prompt();\n    let botMessage = [];\n    if(BossBot){\n      botMessage.push({user: \n        'Boss', message: BossBot})\n    }\n    if(HintBot){\n      botMessage.push({user: 'Hintbot', message: HintBot})\n    }\n    this.setState({\n      messages: [...this.state.messages, ...botMessage]\n    })\n  }\n\n  showModal = e => {\n    this.setState({\n      show: true\n    });\n  };\n\n  closeModal = e => {\n    this.setState({\n      show: false\n    });\n  };\n\n  addMessage(message){\n    console.log(this.state.messages);\n    const messageObject = {user: 'User', message: message}\n    this.setState({\n      messages: [...this.state.messages, messageObject]\n    }, () => {\n      const {BossBot, HintBot} = prompt();\n      let botMessage = [];\n      if(BossBot){\n        botMessage.push({user: \n          'Boss', message: BossBot})\n      }\n      if(HintBot){\n        botMessage.push({user: 'Hintbot', message: HintBot})\n      }\n      this.setState({\n        messages: [...this.state.messages, ...botMessage]\n      })\n    })\n  }\n\n  updateConvoInputValue(val){\n    this.setState({\n      convoInputValue: val\n    })\n  }\n\n  render (){\n  return (\n    <Media>\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark fixed-top\" className=\"navbar\">\n      <Navbar sticky=\"top\" />\n      <Navbar.Brand href=\"#home\">BossBot</Navbar.Brand>\n        <Nav>\n          <Nav.Link href=\"#links\"><a href=\"https://www.glassdoor.com/blog/guide/how-to-negotiate-your-salary/\">Advice to Read Before Starting</a></Nav.Link>\n        </Nav>\n      <Button className=\"my-nav-button\" variant=\"outline-light\" onClick={e => {this.showModal();}}>  Click Here to Learn How To Start</Button>\n      </Navbar>\n\n      \n      <div className=\"sidenav\"></div>\n     \n\n      <Modal show={this.state.show} onHide={this.closeModal}>\n        <Modal.Header>\n          <Modal.Title>BossBot: Practice Salary Negotiation</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Here is where you can practice what you are going to say in a real life situation. Use the text box below to start\n          a conversation with your \"boss\" about why you are interested in a higher compensation and what your target goal salary is. Be sure\n          to consider your previous accomplishments, additional workloads, leadership qualities, and time you have been at your role.\n          Be confident in yourself and know your worth!\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.closeModal}>\n            Let's Start!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <main>\n        <div className=\"conversation\">\n       <ul>{this.state.messages.map((e) => (<li key=\"userMessage\" className={e.user}>{e.message}</li>))}</ul>\n        </div>\n      </main>\n\n      <div className=\"footer\">\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>Enter Your Responses:</InputGroup.Text>\n        </InputGroup.Prepend>\n            <FormControl as=\"textarea\" aria-label=\"With textarea\" value={this.state.convoInputValue} onChange={(evt)=> this.updateConvoInputValue(evt.target.value)}/>\n            <Button variant=\"secondary\" onClick={() => this.addMessage(this.state.convoInputValue)}>Send Message</Button>\n      </InputGroup>\n      </div>\n    </div>\n    </Media>\n    );\n  }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}